{"ast":null,"code":"import _objectSpread from \"D:\\\\react\\\\demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"D:\\\\react\\\\demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\react\\\\demo\\\\src\\\\forms\\\\EditUserForm.js\";\n\nimport React, { useState, useEffect } from \"react\";\n\nvar EditUserForm = function EditUserForm(props) {\n  var _useState = useState(props.currentUser),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  useEffect(function () {\n    setUser(props.currentUser);\n  }, [props]); // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  var handleInputChange = function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setUser(_objectSpread(_objectSpread({}, user), {}, {\n      [name]: value\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: function onSubmit(event) {\n      event.preventDefault();\n      props.updateUser(user.id, user);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: user.name,\n    onChange: handleInputChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"username\",\n    value: user.username,\n    onChange: handleInputChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"Update user\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return props.setEditing(false);\n    },\n    className: \"button muted-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Cancel\"));\n};\n\nexport default EditUserForm;","map":{"version":3,"sources":["D:/react/demo/src/forms/EditUserForm.js"],"names":["React","useState","useEffect","EditUserForm","props","currentUser","user","setUser","handleInputChange","event","target","name","value","preventDefault","updateUser","id","username","setEditing"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAAA,kBACNH,QAAQ,CAACG,KAAK,CAACC,WAAP,CADF;AAAA;AAAA,MACvBC,IADuB;AAAA,MACjBC,OADiB;;AAG9BL,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,OAAO,CAACH,KAAK,CAACC,WAAP,CAAP;AACD,GAFQ,EAEN,CAACD,KAAD,CAFM,CAAT,CAH8B,CAO9B;;AACA,MAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AAAA,wBACXA,KAAK,CAACC,MADK;AAAA,QAC3BC,IAD2B,iBAC3BA,IAD2B;AAAA,QACrBC,KADqB,iBACrBA,KADqB;AAEnCL,IAAAA,OAAO,iCAAMD,IAAN;AAAY,OAACK,IAAD,GAAQC;AAApB,OAAP;AACD,GAHD;;AAKA,sBACE;AACE,IAAA,QAAQ,EAAE,kBAACH,KAAD,EAAW;AACnBA,MAAAA,KAAK,CAACI,cAAN;AACAT,MAAAA,KAAK,CAACU,UAAN,CAAiBR,IAAI,CAACS,EAAtB,EAA0BT,IAA1B;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,KAAK,EAAEA,IAAI,CAACK,IAHd;AAIE,IAAA,QAAQ,EAAEH,iBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,eAcE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,KAAK,EAAEF,IAAI,CAACU,QAHd;AAIE,IAAA,QAAQ,EAAER,iBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,eAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBApBF,eAqBE;AACE,IAAA,OAAO,EAAE;AAAA,aAAMJ,KAAK,CAACa,UAAN,CAAiB,KAAjB,CAAN;AAAA,KADX;AAEE,IAAA,SAAS,EAAC,qBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBF,CADF;AA8BD,CA3CD;;AA6CA,eAAed,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst EditUserForm = (props) => {\n  const [user, setUser] = useState(props.currentUser);\n\n  useEffect(() => {\n    setUser(props.currentUser);\n  }, [props]);\n\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        props.updateUser(user.id, user);\n      }}\n    >\n      <label>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={user.name}\n        onChange={handleInputChange}\n      />\n      <label>Username</label>\n      <input\n        type=\"text\"\n        name=\"username\"\n        value={user.username}\n        onChange={handleInputChange}\n      />\n      <button>Update user</button>\n      <button\n        onClick={() => props.setEditing(false)}\n        className=\"button muted-button\"\n      >\n        Cancel\n      </button>\n    </form>\n  );\n};\n\nexport default EditUserForm;"]},"metadata":{},"sourceType":"module"}